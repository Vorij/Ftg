"""
    Copyright 2021 t.me/innocoffee
    Licensed under the Apache License, Version 2.0
    
    Author is not responsible for any consequencies caused by using this
    software or any of its parts. If you have any questions or wishes, feel
    free to contact Dan by sending pm to @innocoffee_alt.
"""

#<3 title: AntiArabBot
#<3 pic: https://img.icons8.com/fluency/48/000000/mosque.png
#<3 desc: –í –≥—Ä—É–ø–ø–∞—Ö —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∞—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª–æ–≤—ã, —Ç–∞–∫ –∂–µ —Ñ–æ—Ä–≤–∞—Ä–¥—ã(–ø–µ—Ä–µ—Å—ã–ª–∫–∏) –æ—Ç –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤. –ú–æ–¥—É–ª—å –ø–µ—Ä–µ–≤–µ–ª –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ —É–ª—É—á—à–∏–ª @Friendly_userbot - @ForceBrain 

from .. import loader, utils
import telethon
import logging
import os
import time
import re

logger = logging.getLogger(__name__)


@loader.tds
class AntiArabBotMod(loader.Module):
    """–í –≥—Ä—É–ø–ø–∞—Ö —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∞—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª–æ–≤—ã, —Ç–∞–∫ –∂–µ —Ñ–æ—Ä–≤–∞—Ä–¥—ã(–ø–µ—Ä–µ—Å—ã–ª–∫–∏) –æ—Ç –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤. –ú–æ–¥—É–ª—å –ø–µ—Ä–µ–≤–µ–ª –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ —É–ª—É—á—à–∏–ª @Friendly_userbot - @ForceBrain"""
    strings = {
        'name': 'AntiArabBot', 
        'as_on': '–ê–Ω—Ç–∏-–ê—Ä–∞–±/–ë–æ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ, <b>–≤–∫–ª—é—á–µ–Ω</b>\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–ø–æ–ª–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ: <b>{}</b>',
        'as_off': '–ê–Ω—Ç–∏-–ê—Ä–∞–±/–ë–æ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ, <b>–æ—Ç–∫–ª—é—á–µ–Ω</b>',
        'arab_detected': 'üë≥üèæ‚Äç‚ôÇ <a href="tg://user?id={}">{}</a> {}\n\n‚ô®Ô∏è –î–æ—Å—Ç–∞–ª–∏ –∞—Ä–∞–±—ã? –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª—Å, —è –ø–æ–º–æ–≥—É!', 
        'args': '–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –∫–∞–∫–æ–µ –º–Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ: <code>warn | delmsg | mute | kick | ban</code>',
        'action_set': '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: <b>{}</b>',
        'range_set': '–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç <b>{}</b> –Ω–∞ <b>{}</b>'
    }

    async def client_ready(self, client, db):
        self.db = db
        self.client = client
        self.me = str((await client.get_me()).id)
        self.chats = db.get('AntiArabBot', 'chats', {})


    async def antiarabcmd(self, message):
        """.antiarab - –í–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ"""
        chat = str(utils.get_chat_id(message))
        if chat not in self.chats:
            self.chats[chat] = 'ban'
            await utils.answer(message, self.strings('as_on', message).format('ban'))
        else:
            del self.chats[chat]
            await utils.answer(message, self.strings('as_off', message))

        self.db.set('AntiArabBot', 'chats', self.chats)

    async def arabactioncmd(self, message):
        """.arabaction <warn | delmsg | mute | kick | ban> - –£—Å—Ç–∞–Ω–æ–≤–ª–∏–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –≥—Ä—É–ø–ø–µ"""
        args = utils.get_args_raw(message)
        chat = str(utils.get_chat_id(message))
        if args not in ['warn', 'delmsg', 'mute', 'kick', 'ban']:
            await utils.answer(message, self.strings('args', message))
            return

        self.chats[chat] = args
        self.db.set('AntiArabBot', 'chats', self.chats)
        await utils.answer(message, self.strings('action_set', message).format(args))


    async def arabchatscmd(self, message):
        """.arabchats - –ì—Ä—É–ø–ø—ã –≥–¥–µ –≤–∫–ª—é—á–µ–Ω –ê–Ω—Ç–∏-–ê—Ä–∞–±/–ë–æ—Ç"""
        res = f"–ê–Ω—Ç–∏-–ê—Ä–∞–±/–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω –≤ –≥—Ä—É–ø–ø–∞—Ö: <b>{len(self.chats)}</b>üë≥üèæ‚Äç‚ôÇ\n"
        for chat in self.chats:
            chat_obj = await self.client.get_entity(int(chat))
            if getattr(chat_obj, 'title', False):
                chat_name = chat_obj.title
                action = self.chats[chat]
            else:
                chat_name = chat_obj.first_name

            res += f"<code>{chat_name}</code> - {action}" + "\n"

        await utils.answer(message, res)


    async def watcher(self, message):
        try:
            cid = str(utils.get_chat_id(message))

            if cid not in self.chats:
                return

            action = self.chats[cid]
            user = message.from_id

            user_obj = await self.client.get_entity(int(user))
            user_name = ('@'+user_obj.username if user_obj.username is not None else user)
            isbot = (message.sender.bot if message.sender.bot is False else message.forwards if message.forwards is None else "botfor")
            to_check = getattr(message, 'message', '') + getattr(message, 'caption', '') + (message.forward.chat.title if getattr(message, 'forward', None) is not None and getattr(message.forward, 'chat', None) is not None and getattr(message.forward.chat, 'title', None) is not None else '')
            if isbot == "botfor":
            	await message.delete()
            elif len(re.findall('[\u4e00-\u9fff]+', to_check)) == 0 and len(re.findall('[\u0621-\u064A]+', to_check)) == 0:
                return

            try:
                await message.delete()
            except:
                pass

            self.warn = ('warn' in self.allmodules.commands)

            if action == "delmsg":
                msgdel = await self.client.send_message(int(cid), self.strings('arab_detected').format(user, user_name, '<b>—É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ</b> –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∞—Ä–∞–±–∞'))
                time.sleep(6)
                await msgdel.delete()
            elif action == "kick":
                await self.client.kick_participant(int(cid), int(user))
                msgdel = await self.client.send_message(int(cid), self.strings('arab_detected').format(user, user_name, '<b>–∫–∏–∫–Ω—É–ª</b> –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∞—Ä–∞–±–∞'))
                time.sleep(5)
                await msgdel.delete()
            elif action == "ban":
                await self.client(telethon.tl.functions.channels.EditBannedRequest(int(cid), int(user), telethon.tl.types.ChatBannedRights(until_date=time.time() + 3600 * 48 + 2, view_messages=True, send_messages=True, send_media=True, send_stickers=True, send_gifs=True, send_games=True, send_inline=True, embed_links=True)))
                msgdel = await self.client.send_message(int(cid), self.strings('arab_detected').format(user, user_name, '<b>–¥–∞–ª –±–∞–Ω</b> –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∞—Ä–∞–±—É'))
                time.sleep(5)
                await msgdel.delete()
            elif action == "mute":
                await self.client(telethon.tl.functions.channels.EditBannedRequest(int(cid), int(user), telethon.tl.types.ChatBannedRights(until_date=time.time() + 3600 * 48 + 2, send_messages=True)))
                msgdel = await self.client.send_message(int(cid), self.strings('arab_detected').format(user, user_name, '<b>–¥–∞–ª –º—É—Ç</b> –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∞—Ä—É–±—É'))
                time.sleep(5)
                await msgdel.delete()
            elif action == "warn":
                if not self.warn:
                    await self.client.send_message(int(cid), self.strings('arab_detected').format(user, user_name, '<b>–∞—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã</b> –≤ —ç—Ç–æ–º —á–∞—Ç–µ'))
                else:
                    warn_msg = await self.client.send_message(int(cid), f'.warn {user} –∞—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã')
                    await self.allmodules.commands['warn'](warn_msg)
                    await self.client.send_message(int(cid), self.strings('arab_detected').format(user, user_name, '<b>–∞—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã</b> –≤ —ç—Ç–æ–º —á–∞—Ç–µ'))
            else:
                await self.client.send_message(int(cid), self.strings('arab_detected').format(user, user_name, '–ü—Ä–æ—Å—Ç–æ –æ—Å—Ç—ã–Ω—å'))
        except:
            logger.exception('error')
            pass
